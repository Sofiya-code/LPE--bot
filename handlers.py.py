from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext

from ..keyboards import get_main_keyboard, get_categories_keyboard, get_back_keyboard
from ..data.terms import TERMS


async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )


async def help_command(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    help_text = (
        "üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
        "üîç –ö–∞–∫ –∏—Å–∫–∞—Ç—å —Ç–µ—Ä–º–∏–Ω—ã:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üîç –ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞'\n"
        "2. –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —á–∞—Å—Ç—å —Å–ª–æ–≤–∞\n"
        "3. –ë–æ—Ç –Ω–∞–π–¥–µ—Ç –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è\n\n"
        "üìö –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Ä–º–∏–Ω–æ–≤'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        "3. –í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞\n\n"
        "‚ú® –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∫—É—Ä—Å–∞ ¬´–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫¬ª"
    )
    await callback.message.edit_text(
        help_text,
        reply_markup=get_back_keyboard()
    )
    await callback.answer()


async def info_command(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    info_text = (
        "üí° –≠—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫—É—Ä—Å–∞ ¬´–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫¬ª.\n\n"
        "üéØ –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–æ–≤, –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø–∞—Ä–µ —è–∑—ã–∫–æ–≤ "
        "(—Ä—É—Å—Å–∫–∏–π-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π) –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∏—Ö –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–≥–æ/—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ "
        "–≤ –æ–±–ª–∞—Å—Ç–∏ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∏, –ø–µ–¥–∞–≥–æ–≥–∏–∫–∏ –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏.\n\n"
        "üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "1Ô∏è‚É£ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ‚úÖ\n"
        "2Ô∏è‚É£ –£—á–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–≤–æ–¥–∏–º–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞ üí°\n"
        "3Ô∏è‚É£ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ —É–∑–∫–æ—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏‚è±Ô∏è\n\n"
        "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n"
        "- –¶–∞–Ω–¥–µ—Ä –°–æ—Ñ–∏—è, 139 (—Ç–∏–º–ª–∏–¥);\n"
        "- –¢–∏–º–æ—Ñ–µ–µ–≤–∞ –í–∏—Ç–∞–ª–∏—è, 139;\n"
        "- –ú–∞—Ö–º—É—Ç–æ–≤–∞ –ó–∞–ª–∏–Ω–∞, 139;\n"
        "- –ú—É—Ö–∞–º–µ—Ç–∑—è–Ω–æ–≤–∞ –ê–¥–µ–ª—è, 139;\n"
        "- –ë–∞—è–Ω–æ–≤ –î–∞–Ω–∏–ª, 139;\n"
        "- –ê–º–∏—Ä–æ–≤ –†–∞–º–∏–ª—å, 139."
    )
    await callback.message.edit_text(
        info_text,
        reply_markup=get_back_keyboard()
    )
    await callback.answer()


async def categories_command(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_categories_keyboard()
    )
    await callback.answer()


async def handle_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split("_")[1]
    category_mapping = {
        "linguistics": "–ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞",
        "pedagogy": "–ø–µ–¥–∞–≥–æ–≥–∏–∫–∞", 
        "economics": "—ç–∫–æ–Ω–æ–º–∏–∫–∞"
    }
    mapped_category = category_mapping.get(category)
    
    if mapped_category in TERMS:
        await state.update_data(current_category=mapped_category)
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {mapped_category}\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton("–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="categories")
            ]])
        )
    else:
        await callback.message.edit_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_categories_keyboard()
        )
    await callback.answer()


async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.reset_data()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


def register_common_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.register_message_handler(start_command, commands=['start'])
    dp.register_callback_query_handler(help_command, text="help")
    dp.register_callback_query_handler(info_command, text="info")
    dp.register_callback_query_handler(categories_command, text="categories")
    dp.register_callback_query_handler(handle_category, text_startswith="cat_")
    dp.register_callback_query_handler(back_to_main, text="back_to_main")